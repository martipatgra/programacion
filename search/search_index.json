{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Programaci\u00f3n Aqu\u00ed puedes encontrar los apuntes del m\u00f3dulo de Programaci\u00f3n , que se imparte en el primer curso del ciclo formativo de grado superior de Desarrollo de Aplicaciones Multiplataforma. La duraci\u00f3n del m\u00f3dulo es de 256 horas lectivas, a raz\u00f3n de 8 horas semanales . Se ha planificado bas\u00e1ndose en 4 sesiones de 2 horas lectivas por semana. Resultados de aprendizaje Reconoce la estructura de un programa inform\u00e1tico, identificando y relacionando los elementos propios del lenguaje de programaci\u00f3n utilizado. Escribe y prueba programas sencillos, reconociendo y aplicando los fundamentos de la programaci\u00f3n orientada a objetos. Escribe y depura c\u00f3digo, analizando y utilizando las estructuras de control del lenguaje. Desarrolla programas organizados en clases analizando y aplicando los principios de la programaci\u00f3n orientada a objetos. Realiza operaciones de entrada y salida de informaci\u00f3n, utilizando procedimientos espec\u00edficos del lenguaje y librer\u00edas de clases. Escribe programas que manipulen informaci\u00f3n seleccionando y utilizando tipos avanzados de datos. Desarrolla programas aplicando caracter\u00edsticas avanzadas de los lenguajes orientados a objetos y del entorno de programaci\u00f3n. Utiliza bases de datos orientadas a objetos, analizando sus caracter\u00edsticas y aplicando t\u00e9cnicas para mantener la persistencia de la informaci\u00f3n. Gestiona informaci\u00f3n almacenada en bases de datos relacionales manteniendo la integridad y consistencia de los datos. Unidades did\u00e1cticas / Temporalizaci\u00f3n A continuaci\u00f3n se muestran las unidades did\u00e1cticas y una estimaci\u00f3n temporal de cada una de ellas. El curso est\u00e1 dividido en 10 unidades did\u00e1cticas distribuidas en tres trimestres. Primera evaluaci\u00f3n Compuesta por las 5 primeras unidades, donde se estudiar\u00e1n los aspectos b\u00e1sicos de la programaci\u00f3n orientada a objetos usando el lenguaje de programaci\u00f3n Java . Unidad T\u00edtulo Sesiones Horas 1 Elementos de un programa inform\u00e1tico 10 20 2 Estructuras b\u00e1sicas de control 13 26 3 Arrays 9 18 4 Programaci\u00f3n orientada a objetos. Clases y Objetos 12 24 5 Herencia y polimorfismo 14 28 Segunda evaluaci\u00f3n Incluye 3 unidades y se profundizar\u00e1 en aspectos de codificaci\u00f3n como colecciones de Java, interfaces de usuario, reflections, expresiones regulares, etc. Unidad T\u00edtulo Sesiones Horas 6 Colecciones 15 30 7 Programaci\u00f3n avanzada 10 20 8 Interfaces de usuario 16 32 Tercera evaluaci\u00f3n Por \u00faltimo se aprender\u00e1n t\u00e9cnicas de lectura y escritura y persistencia de la informaci\u00f3n en ficheros y bases de datos. Unidad T\u00edtulo Sesiones Horas 9 Persistencia de la informaci\u00f3n 13 26 10 Bases de datos 16 32 Instrumentos de calificaci\u00f3n La nota de cada evaluaci\u00f3n se calcula mediante: 30% Trabajo en Clase / Actividades Se eval\u00faan todas las actividades realizadas en clase y en casa. Las actividades se eval\u00faan mediante tareas de Aules con calificaciones comprendidas entre 0 y 3 puntos: 0: No entregada. 1: Entregada pero soluci\u00f3n err\u00f3nea o incompleta. 2: Entregada y soluci\u00f3n aceptable, aunque tiene alg\u00fan apartado incompleto. 3: Entregada y soluci\u00f3n correcta. Las actividades son de entrega obligatoria para realizar el examen. Cualquier actividad que se detecte copia ser\u00e1 puntuada con 0. 70% Actividad de evaluaci\u00f3n. La nota final se calcula mediante la media de cada una de las evaluaciones.","title":"Inicio"},{"location":"#programacion","text":"Aqu\u00ed puedes encontrar los apuntes del m\u00f3dulo de Programaci\u00f3n , que se imparte en el primer curso del ciclo formativo de grado superior de Desarrollo de Aplicaciones Multiplataforma. La duraci\u00f3n del m\u00f3dulo es de 256 horas lectivas, a raz\u00f3n de 8 horas semanales . Se ha planificado bas\u00e1ndose en 4 sesiones de 2 horas lectivas por semana.","title":"Programaci\u00f3n"},{"location":"#resultados-de-aprendizaje","text":"Reconoce la estructura de un programa inform\u00e1tico, identificando y relacionando los elementos propios del lenguaje de programaci\u00f3n utilizado. Escribe y prueba programas sencillos, reconociendo y aplicando los fundamentos de la programaci\u00f3n orientada a objetos. Escribe y depura c\u00f3digo, analizando y utilizando las estructuras de control del lenguaje. Desarrolla programas organizados en clases analizando y aplicando los principios de la programaci\u00f3n orientada a objetos. Realiza operaciones de entrada y salida de informaci\u00f3n, utilizando procedimientos espec\u00edficos del lenguaje y librer\u00edas de clases. Escribe programas que manipulen informaci\u00f3n seleccionando y utilizando tipos avanzados de datos. Desarrolla programas aplicando caracter\u00edsticas avanzadas de los lenguajes orientados a objetos y del entorno de programaci\u00f3n. Utiliza bases de datos orientadas a objetos, analizando sus caracter\u00edsticas y aplicando t\u00e9cnicas para mantener la persistencia de la informaci\u00f3n. Gestiona informaci\u00f3n almacenada en bases de datos relacionales manteniendo la integridad y consistencia de los datos.","title":"Resultados de aprendizaje"},{"location":"#unidades-didacticas-temporalizacion","text":"A continuaci\u00f3n se muestran las unidades did\u00e1cticas y una estimaci\u00f3n temporal de cada una de ellas. El curso est\u00e1 dividido en 10 unidades did\u00e1cticas distribuidas en tres trimestres.","title":"Unidades did\u00e1cticas / Temporalizaci\u00f3n"},{"location":"#primera-evaluacion","text":"Compuesta por las 5 primeras unidades, donde se estudiar\u00e1n los aspectos b\u00e1sicos de la programaci\u00f3n orientada a objetos usando el lenguaje de programaci\u00f3n Java . Unidad T\u00edtulo Sesiones Horas 1 Elementos de un programa inform\u00e1tico 10 20 2 Estructuras b\u00e1sicas de control 13 26 3 Arrays 9 18 4 Programaci\u00f3n orientada a objetos. Clases y Objetos 12 24 5 Herencia y polimorfismo 14 28","title":"Primera evaluaci\u00f3n"},{"location":"#segunda-evaluacion","text":"Incluye 3 unidades y se profundizar\u00e1 en aspectos de codificaci\u00f3n como colecciones de Java, interfaces de usuario, reflections, expresiones regulares, etc. Unidad T\u00edtulo Sesiones Horas 6 Colecciones 15 30 7 Programaci\u00f3n avanzada 10 20 8 Interfaces de usuario 16 32","title":"Segunda evaluaci\u00f3n"},{"location":"#tercera-evaluacion","text":"Por \u00faltimo se aprender\u00e1n t\u00e9cnicas de lectura y escritura y persistencia de la informaci\u00f3n en ficheros y bases de datos. Unidad T\u00edtulo Sesiones Horas 9 Persistencia de la informaci\u00f3n 13 26 10 Bases de datos 16 32","title":"Tercera evaluaci\u00f3n"},{"location":"#instrumentos-de-calificacion","text":"La nota de cada evaluaci\u00f3n se calcula mediante: 30% Trabajo en Clase / Actividades Se eval\u00faan todas las actividades realizadas en clase y en casa. Las actividades se eval\u00faan mediante tareas de Aules con calificaciones comprendidas entre 0 y 3 puntos: 0: No entregada. 1: Entregada pero soluci\u00f3n err\u00f3nea o incompleta. 2: Entregada y soluci\u00f3n aceptable, aunque tiene alg\u00fan apartado incompleto. 3: Entregada y soluci\u00f3n correcta. Las actividades son de entrega obligatoria para realizar el examen. Cualquier actividad que se detecte copia ser\u00e1 puntuada con 0. 70% Actividad de evaluaci\u00f3n. La nota final se calcula mediante la media de cada una de las evaluaciones.","title":"Instrumentos de calificaci\u00f3n"},{"location":"about/","text":"About Patricia Mart\u00ed marti_patgra@gva.es","title":"About"},{"location":"about/#about","text":"Patricia Mart\u00ed marti_patgra@gva.es","title":"About"},{"location":"ud1/conceptosbasicos/","text":"JAVA Java es un lenguaje de programaci\u00f3n orientado a objetos. Fue creado por James Gosling en 1995. Oracle lo compr\u00f3. Es un lenguaje indepediente de la plataforma donde va a ser ejecutado, esto significa, que una vez que se compila (.class tambi\u00e9n llamado bytecode) puede ser transportado a diferentes plataformas (Windows, MacOS, Linux) para ser ejecutado. \u00bfC\u00f3mo se hace esto? Utilizando la JVM (Java Virtual Machine). La JVM coge los bytecode compilados y los interpreta dependiendo del OS para poder ser ejecutado. Por tanto, el bytecode siempre es el mismo, pero lo que genera la JVM cambiar\u00e1 para cada SO. Tambi\u00e9n existen otros t\u00e9rminos muy famosos relacionados con Java como JRE y JDK. JRE Java Runtime Environment . La m\u00e1quina virtual de Java est\u00e1 incluida en el JRE. Se utiliza para ejecutar aplicaciones Java en el SO, por tanto si queremos desplegar una aplicaci\u00f3n en Java, necesitamos tener instalado previamente el JRE para esa m\u00e1quina y plataforma. JDK Java Development Kit . Es m\u00e1s pesado que el JRE, contiene todas las herramientas para programar y compilar las clases Java en bytecode, por tanto cuando desarrollamos clases Java necesitamos el JDK. Adem\u00e1s incluy el JRE. Versiones Java La \u00faltima versi\u00f3n de Java se conoce como LTS Release (Long Term Support), y es JAVA 11 LTS ( la LTS 17 estar\u00e1 disponible 14 de Septiembre 2021). Nosotros para el prop\u00f3sito de este curso usaremos Java 11. \u00bfPorqu\u00e9 Java? Naci\u00f3 en 1995 y todav\u00eda sigue siendo uno de los lenguajes m\u00e1s usados a nivel mundial. Su capacidad de escribirlo y ejecutarlo en cualquier plataforma: \"Write once, run anywhere\" . Desde que naci\u00f3 han salido muchas releases de gran importancia, el lenguaje sigue evolucionando con nuevas funcionalidades. Tiene un comunidad muy grande de c\u00f3digo abierto, documentaci\u00f3n y tutoriales. Es usado por muchas compa\u00f1\u00edas de software, por tanto se ofertan muchos empleos de desarrolladores Java.","title":"Conceptos b\u00e1sicos del lenguaje"},{"location":"ud1/conceptosbasicos/#java","text":"Java es un lenguaje de programaci\u00f3n orientado a objetos. Fue creado por James Gosling en 1995. Oracle lo compr\u00f3. Es un lenguaje indepediente de la plataforma donde va a ser ejecutado, esto significa, que una vez que se compila (.class tambi\u00e9n llamado bytecode) puede ser transportado a diferentes plataformas (Windows, MacOS, Linux) para ser ejecutado. \u00bfC\u00f3mo se hace esto? Utilizando la JVM (Java Virtual Machine). La JVM coge los bytecode compilados y los interpreta dependiendo del OS para poder ser ejecutado. Por tanto, el bytecode siempre es el mismo, pero lo que genera la JVM cambiar\u00e1 para cada SO. Tambi\u00e9n existen otros t\u00e9rminos muy famosos relacionados con Java como JRE y JDK.","title":"JAVA "},{"location":"ud1/conceptosbasicos/#jre","text":"Java Runtime Environment . La m\u00e1quina virtual de Java est\u00e1 incluida en el JRE. Se utiliza para ejecutar aplicaciones Java en el SO, por tanto si queremos desplegar una aplicaci\u00f3n en Java, necesitamos tener instalado previamente el JRE para esa m\u00e1quina y plataforma.","title":"JRE"},{"location":"ud1/conceptosbasicos/#jdk","text":"Java Development Kit . Es m\u00e1s pesado que el JRE, contiene todas las herramientas para programar y compilar las clases Java en bytecode, por tanto cuando desarrollamos clases Java necesitamos el JDK. Adem\u00e1s incluy el JRE.","title":"JDK"},{"location":"ud1/conceptosbasicos/#versiones-java","text":"La \u00faltima versi\u00f3n de Java se conoce como LTS Release (Long Term Support), y es JAVA 11 LTS ( la LTS 17 estar\u00e1 disponible 14 de Septiembre 2021). Nosotros para el prop\u00f3sito de este curso usaremos Java 11.","title":"Versiones Java"},{"location":"ud1/conceptosbasicos/#porque-java","text":"Naci\u00f3 en 1995 y todav\u00eda sigue siendo uno de los lenguajes m\u00e1s usados a nivel mundial. Su capacidad de escribirlo y ejecutarlo en cualquier plataforma: \"Write once, run anywhere\" . Desde que naci\u00f3 han salido muchas releases de gran importancia, el lenguaje sigue evolucionando con nuevas funcionalidades. Tiene un comunidad muy grande de c\u00f3digo abierto, documentaci\u00f3n y tutoriales. Es usado por muchas compa\u00f1\u00edas de software, por tanto se ofertan muchos empleos de desarrolladores Java.","title":"\u00bfPorqu\u00e9 Java?"},{"location":"ud1/datatypejava/","text":"Tipos de datos Un tipo de datos es un conjunto de valores y un conjunto de operaciones definidas en ellos. Se pueden clasificar en primitivos y objetos. Primitivos Los primitivos son los m\u00e1s b\u00e1sicos y fundamentales, vienen integrados en Java. Especifican el tipo de valor almacenado en una variable y el tama\u00f1o de la memoria. Hay 8 tipos primitivos de datos integrados en el lenguaje Java. Estos incluyen: int, byte, short, long, float, double, boolean y char. Primitive data type Wrapper class byte Byte short Short int Integer long Long float Float double Double boolean Boolean char Character byte Como su propio nombre denota, emplea un solo byte (8 bits) de almacenamiento. Esto permite almacenar valores en el rango [-128, 127]. Raramente se usa. Ocupa menos memoria y puede ser m\u00e1s r\u00e1pido accedido. byte b = 2 ; short Usa el doble de almacenamiento que el anterior, es decir, ocupa 16 bits. short s = 3467 ; int emplea 4 bytes (32 bits) de almacenamiento y es el tipo de dato entero m\u00e1s empleado. Necesita cuatro veces el espacio que ocupa un byte. Es el entero predeterminado usado en Java. int maxValor = 2147483647 ; // after java 7 and higher int maxValue = 2_147_483_647 ; Casting Es una forma de convertir un n\u00famero de un tipo a otro tipo de dato. Para hacerlo ponemos en par\u00e9ntesis el tipo de dato al que queremos convertirlo. byte miByte = ( byte ) ( 14 / 2 ); long es el tipo entero de mayor tama\u00f1o, 8 bytes (64 bits). Para definir un long, tenemos que hacerlo de la siguiente forma: long myLongNumber = 500L ; float tiene una parte flotante que sirve para expresar n\u00fameros decimales. Es de simple precisi\u00f3n (formato y cantidad de espacio que ocupa) porque ocupa 32 bits. No se recomienda mucho su uso. float f = 4 ; float f = 4f ; //tambi\u00e9n v\u00e1lida double es un n\u00famero de precisi\u00f3n doble y ocupa 64 bits. Es el flotante predeterminado en Java. Se recomienda su uso. Muchas librer\u00edas internas de Java, relacionadas con operaciones matem\u00e1ticas, usan double. double d = 5 ; double d = 5d ; //tambi\u00e9n v\u00e1lida char se utiliza para almacenar caracteres (letras, n\u00fameros, signos, etc.) individuales. Ocupa 2 bytes en memoria (16 bits). Permite almacenar caracteres Unicode. Unicode es un est\u00e1ndar de codificaci\u00f3n internacional que nos permite representar diferentes idiomas; y la forma en que funciona es usando una combinaci\u00f3n de los dos bytes que un char ocupa en la memoria, que puede representar hasta 65535 diferentes tipos de caracteres. Unicode table. char c = 'P' ; char u = '\\u00A2' ; //print unicode character Un car\u00e1cter precedido por una barra invertida () es una secuencia de escape y tiene un significado especial para el compilador. La siguiente tabla muestra las secuencias de escape de Java: boolean solo permite almacenar dos posibles valores que son true o false . Tiene la finalidad de facilitar el trabajo con valores \"verdadero/falso\" (booleanos), resultantes por regla general de evaluar expresiones. boolean isMyNamePatri = true ; Wrapper classes (clases contenedores) Las clases contenedoras proporcionan una forma de utilizar tipos de datos primitivos como objetos. En Java, tenemos una Wrapper class para cada uno de los 8 tipos de datos primitivos. Gracias a esto, podemos realizar operaciones en un dato primitivo como por ejemplo en un int: int minimoValorInt = Integer . MIN_VALUE ; No primitivos u objetos En Java, los tipos de datos no primitivos son los tipos de datos de referencia o los tipos de datos creados por el usuario. Todos los tipos de datos no primitivos se implementan utilizando conceptos de objeto. Cada variable del tipo de datos no primitivo es un objeto. Los tipos de datos no primitivos pueden utilizar m\u00e9todos adicionales para realizar determinadas operaciones. El valor predeterminado de la variable de tipo de datos no primitivos es nulo. String - Cadena de caracteres String es una clase integrada en el lenguaje Java ampliamente utilizada y definido en el paquete java.lang. Representa cadenas de caracteres y se utilizan para almacenar varios atributos como nombre de usuario, contrase\u00f1a, etc. Los String son inmutables; es decir, no se pueden modificar una vez creados. Siempre que se modifica un objeto String, en realidad se crea uno nuevo String. Existen varias formas para crear un String: String texto = \"Severo Ochoa\" ; String texto2 = new String ( \"Severo Ochoa\" ); Asignaci\u00f3n de memoria de objetos String La memoria se divide en dos partes, el String Pool y la memoria Heap. Veamos como funcionar\u00eda para la imagen anterior. Siempre que creamos un String con comillas dobles, se almacenan en String Pool. String Pool almacena el \u00fanico valor en \u00e9l. Es por eso que, String s1 = \"blogs\" se almacenan como el primer valor en el String Pool. Siempre que creamos un objeto usando la palabra clave new , se almacena en la memoria Heap pero fuera del String Pool. Aqu\u00ed se puede almacenar valores duplicados ya que pertenece a diferentes objetos. Entonces, para la declaraci\u00f3n String s2 = new String(\u201cblogs\u201d), aunque el valor de s1 y s2 es el mismo, s2 se almacenar\u00e1 fuera del String Pool. Cuando creamos otro String usando comillas dobles, primero verifica todos los valores en el String Pool y si coincide con alguno se asigna la misma ubicaci\u00f3n asignada a otro objeto de referencia. Por lo tanto, String s3 = \u201dblogs\u201d no agregar\u00e1 una nueva entrada en el String Pool. Pero si creamos otro objeto con un valor existente usando la palabra clave new . Asignar\u00e1 nueva memoria al nuevo objeto en el Heap. Por lo tanto, a String s4 = new String (\"blogs\") se le asignar\u00e1 nueva memoria. Ahora, si manipulamos el valor en s1 usando s1 = \u201dNew\u201c + s1, no actualizar\u00e1 la entrada o referencia existente de s1. Este proceso crear\u00e1 una nueva entrada en el String Pool con el valor \"New blogs\" y la referencia de memoria cambiar\u00eda para el objeto s1. Java String Class Methods La clase java.lang.String proporciona muchos m\u00e9todos \u00fatiles para realizar operaciones en la secuencia de valores char.","title":"1.4.- Tipos de datos"},{"location":"ud1/datatypejava/#tipos-de-datos","text":"Un tipo de datos es un conjunto de valores y un conjunto de operaciones definidas en ellos. Se pueden clasificar en primitivos y objetos.","title":"Tipos de datos"},{"location":"ud1/datatypejava/#primitivos","text":"Los primitivos son los m\u00e1s b\u00e1sicos y fundamentales, vienen integrados en Java. Especifican el tipo de valor almacenado en una variable y el tama\u00f1o de la memoria. Hay 8 tipos primitivos de datos integrados en el lenguaje Java. Estos incluyen: int, byte, short, long, float, double, boolean y char. Primitive data type Wrapper class byte Byte short Short int Integer long Long float Float double Double boolean Boolean char Character","title":"Primitivos"},{"location":"ud1/datatypejava/#byte","text":"Como su propio nombre denota, emplea un solo byte (8 bits) de almacenamiento. Esto permite almacenar valores en el rango [-128, 127]. Raramente se usa. Ocupa menos memoria y puede ser m\u00e1s r\u00e1pido accedido. byte b = 2 ;","title":"byte"},{"location":"ud1/datatypejava/#short","text":"Usa el doble de almacenamiento que el anterior, es decir, ocupa 16 bits. short s = 3467 ;","title":"short"},{"location":"ud1/datatypejava/#int","text":"emplea 4 bytes (32 bits) de almacenamiento y es el tipo de dato entero m\u00e1s empleado. Necesita cuatro veces el espacio que ocupa un byte. Es el entero predeterminado usado en Java. int maxValor = 2147483647 ; // after java 7 and higher int maxValue = 2_147_483_647 ; Casting Es una forma de convertir un n\u00famero de un tipo a otro tipo de dato. Para hacerlo ponemos en par\u00e9ntesis el tipo de dato al que queremos convertirlo. byte miByte = ( byte ) ( 14 / 2 );","title":"int"},{"location":"ud1/datatypejava/#long","text":"es el tipo entero de mayor tama\u00f1o, 8 bytes (64 bits). Para definir un long, tenemos que hacerlo de la siguiente forma: long myLongNumber = 500L ;","title":"long"},{"location":"ud1/datatypejava/#float","text":"tiene una parte flotante que sirve para expresar n\u00fameros decimales. Es de simple precisi\u00f3n (formato y cantidad de espacio que ocupa) porque ocupa 32 bits. No se recomienda mucho su uso. float f = 4 ; float f = 4f ; //tambi\u00e9n v\u00e1lida","title":"float"},{"location":"ud1/datatypejava/#double","text":"es un n\u00famero de precisi\u00f3n doble y ocupa 64 bits. Es el flotante predeterminado en Java. Se recomienda su uso. Muchas librer\u00edas internas de Java, relacionadas con operaciones matem\u00e1ticas, usan double. double d = 5 ; double d = 5d ; //tambi\u00e9n v\u00e1lida","title":"double"},{"location":"ud1/datatypejava/#char","text":"se utiliza para almacenar caracteres (letras, n\u00fameros, signos, etc.) individuales. Ocupa 2 bytes en memoria (16 bits). Permite almacenar caracteres Unicode. Unicode es un est\u00e1ndar de codificaci\u00f3n internacional que nos permite representar diferentes idiomas; y la forma en que funciona es usando una combinaci\u00f3n de los dos bytes que un char ocupa en la memoria, que puede representar hasta 65535 diferentes tipos de caracteres. Unicode table. char c = 'P' ; char u = '\\u00A2' ; //print unicode character Un car\u00e1cter precedido por una barra invertida () es una secuencia de escape y tiene un significado especial para el compilador. La siguiente tabla muestra las secuencias de escape de Java:","title":"char"},{"location":"ud1/datatypejava/#boolean","text":"solo permite almacenar dos posibles valores que son true o false . Tiene la finalidad de facilitar el trabajo con valores \"verdadero/falso\" (booleanos), resultantes por regla general de evaluar expresiones. boolean isMyNamePatri = true ;","title":"boolean"},{"location":"ud1/datatypejava/#wrapper-classes-clases-contenedores","text":"Las clases contenedoras proporcionan una forma de utilizar tipos de datos primitivos como objetos. En Java, tenemos una Wrapper class para cada uno de los 8 tipos de datos primitivos. Gracias a esto, podemos realizar operaciones en un dato primitivo como por ejemplo en un int: int minimoValorInt = Integer . MIN_VALUE ;","title":"Wrapper classes (clases contenedores)"},{"location":"ud1/datatypejava/#no-primitivos-u-objetos","text":"En Java, los tipos de datos no primitivos son los tipos de datos de referencia o los tipos de datos creados por el usuario. Todos los tipos de datos no primitivos se implementan utilizando conceptos de objeto. Cada variable del tipo de datos no primitivo es un objeto. Los tipos de datos no primitivos pueden utilizar m\u00e9todos adicionales para realizar determinadas operaciones. El valor predeterminado de la variable de tipo de datos no primitivos es nulo.","title":"No primitivos u objetos"},{"location":"ud1/datatypejava/#string-cadena-de-caracteres","text":"String es una clase integrada en el lenguaje Java ampliamente utilizada y definido en el paquete java.lang. Representa cadenas de caracteres y se utilizan para almacenar varios atributos como nombre de usuario, contrase\u00f1a, etc. Los String son inmutables; es decir, no se pueden modificar una vez creados. Siempre que se modifica un objeto String, en realidad se crea uno nuevo String. Existen varias formas para crear un String: String texto = \"Severo Ochoa\" ; String texto2 = new String ( \"Severo Ochoa\" );","title":"String - Cadena de caracteres"},{"location":"ud1/datatypejava/#asignacion-de-memoria-de-objetos-string","text":"La memoria se divide en dos partes, el String Pool y la memoria Heap. Veamos como funcionar\u00eda para la imagen anterior. Siempre que creamos un String con comillas dobles, se almacenan en String Pool. String Pool almacena el \u00fanico valor en \u00e9l. Es por eso que, String s1 = \"blogs\" se almacenan como el primer valor en el String Pool. Siempre que creamos un objeto usando la palabra clave new , se almacena en la memoria Heap pero fuera del String Pool. Aqu\u00ed se puede almacenar valores duplicados ya que pertenece a diferentes objetos. Entonces, para la declaraci\u00f3n String s2 = new String(\u201cblogs\u201d), aunque el valor de s1 y s2 es el mismo, s2 se almacenar\u00e1 fuera del String Pool. Cuando creamos otro String usando comillas dobles, primero verifica todos los valores en el String Pool y si coincide con alguno se asigna la misma ubicaci\u00f3n asignada a otro objeto de referencia. Por lo tanto, String s3 = \u201dblogs\u201d no agregar\u00e1 una nueva entrada en el String Pool. Pero si creamos otro objeto con un valor existente usando la palabra clave new . Asignar\u00e1 nueva memoria al nuevo objeto en el Heap. Por lo tanto, a String s4 = new String (\"blogs\") se le asignar\u00e1 nueva memoria. Ahora, si manipulamos el valor en s1 usando s1 = \u201dNew\u201c + s1, no actualizar\u00e1 la entrada o referencia existente de s1. Este proceso crear\u00e1 una nueva entrada en el String Pool con el valor \"New blogs\" y la referencia de memoria cambiar\u00eda para el objeto s1.","title":"Asignaci\u00f3n de memoria de objetos String"},{"location":"ud1/datatypejava/#java-string-class-methods","text":"La clase java.lang.String proporciona muchos m\u00e9todos \u00fatiles para realizar operaciones en la secuencia de valores char.","title":"Java String Class Methods"},{"location":"ud1/elementos/","text":"Elementos de un programa inform\u00e1tico Un programa es una secuencia de instrucciones que un ordenador ejecuta para realizar alguna tarea. Parece una idea bastante simple, pero para que el ordenador pueda hacer uso de las instrucciones, deben estar escritas de forma que las pueda usar. Esto significa que los programas deben estar escritos en lenguajes de programaci\u00f3n. Los lenguajes de programaci\u00f3n se diferencian de los lenguajes humanos ordinarios en que son completamente inequ\u00edvocos y muy estrictos sobre lo que est\u00e1 y no est\u00e1 permitido en un programa. Las reglas que determinan lo que est\u00e1 permitido se denominan sintaxis del lenguaje. Las reglas de sintaxis especifican el vocabulario b\u00e1sico del lenguaje y c\u00f3mo se pueden construir los programas. Lenguajes de programaci\u00f3n Se trata de un conjunto de instrucciones que permite la comunicaci\u00f3n de los humanos con los ordenadores. C --> bases de datos, videojuegos, kernel linux, IOT, dispositivos inteligentes, etc. Python --> inteligencia artificial, big data, etc. Java --> puntos de ventas, aplicaciones de escritorio, cajeros autom\u00e1ticos, dispositivos m\u00f3viles, ... \u00bfCon qu\u00e9 lenguaje de programaci\u00f3n debo empezar? En realidad, no existe el mejor lenguaje de programaci\u00f3n para empezar, y el lenguaje que elijas pr\u00e1cticamente no tendr\u00e1 un efecto duradero en tu carrera. Los lenguajes de programaci\u00f3n pueden verse muy diferentes en la superficie, pero la mayor\u00eda de los conceptos fundamentales se transferir\u00e1n de un lenguaje a otro. Aprender un nuevo idioma tambi\u00e9n ser\u00e1 m\u00e1s f\u00e1cil con el tiempo; un principiante puede tardar meses antes de que se sienta c\u00f3modo con su primer lenguaje; un programador experimentado puede familiarizarse con un nuevo idioma en cuesti\u00f3n de d\u00edas. 7 Tips para aprender a programar con \u00e9xito 1 . Learn by doing. Always play with the code while learning 2 . Grasp the fundamentals for long-term benefits 3 . Code by hand. It sharpens proficiency and you\u2019ll need it to get a job 4 . Ask for help. You\u2019ll need it 5 . Seek out more online resources. There\u2019s a wealth of content 6 . Don\u2019t just read the sample code. Tinker with it! 7 . Take breaks when debugging Fuente: Coding dojo Tip S\u00e9 persistente, no te rindas! Actividad 1 - Crear y compilar un programa en java desde l\u00ednea de comandos Crea un PDF llamado \"UD1Actividad1.pdf\", incluyendo capturas con las siguientes acciones: Crea un fichero llamado HolaMundo.java con el siguiente texto: public class HolaMundo { public static void main ( String [ ] arg ) { System . out . println ( \"Mi primer programa.\" ); } } Compila el fichero desde la consola usando el compilador de java: javac HolaMundo.java Ejecuta el programa mediante java HolaMundo Responde a las siguientes cuestiones en el PDF. \u00bfSe ha generado alg\u00fan fichero extra al realizar el paso de compilaci\u00f3n?, Si es as\u00ed, \u00bfc\u00f3mo se llama el fichero compilado? \u00bfQu\u00e9 incluye dicho fichero? Si ahora quisiera ejecutar el programa HolaMundo desde otro sistema operativo que pasos tendr\u00eda que realizar? S\u00fabelo a AULES. Actividad 2 - An\u00e1lisis y clasificaci\u00f3n de diferentes IDEs Descarga e instala al menos 3 entornos de desarrollo diferentes a IntelliJ. Crea un nuevo proyecto Java Hola Mundo en cada uno de ellos. Crea una tabla donde realices una comparativa de ellos y clasif\u00edcalos seg\u00fan ciertas caracter\u00edsticas (plataforma, lenguajes que soporta, libres o propietarios, tipo de aplicaciones, uso en el mundo real, fabricantes o empresas, plugins o frameworks que ofrece, etc). Realiza capturas de pantalla y s\u00fabelo en formato PDF(\"UD1Actividad2.pdf\") a AULES.","title":"1.1.- Programa y lenguajes de programaci\u00f3n"},{"location":"ud1/elementos/#elementos-de-un-programa-informatico","text":"Un programa es una secuencia de instrucciones que un ordenador ejecuta para realizar alguna tarea. Parece una idea bastante simple, pero para que el ordenador pueda hacer uso de las instrucciones, deben estar escritas de forma que las pueda usar. Esto significa que los programas deben estar escritos en lenguajes de programaci\u00f3n. Los lenguajes de programaci\u00f3n se diferencian de los lenguajes humanos ordinarios en que son completamente inequ\u00edvocos y muy estrictos sobre lo que est\u00e1 y no est\u00e1 permitido en un programa. Las reglas que determinan lo que est\u00e1 permitido se denominan sintaxis del lenguaje. Las reglas de sintaxis especifican el vocabulario b\u00e1sico del lenguaje y c\u00f3mo se pueden construir los programas.","title":"Elementos de un programa inform\u00e1tico"},{"location":"ud1/elementos/#lenguajes-de-programacion","text":"Se trata de un conjunto de instrucciones que permite la comunicaci\u00f3n de los humanos con los ordenadores. C --> bases de datos, videojuegos, kernel linux, IOT, dispositivos inteligentes, etc. Python --> inteligencia artificial, big data, etc. Java --> puntos de ventas, aplicaciones de escritorio, cajeros autom\u00e1ticos, dispositivos m\u00f3viles, ...","title":"Lenguajes de programaci\u00f3n"},{"location":"ud1/elementos/#con-que-lenguaje-de-programacion-debo-empezar","text":"En realidad, no existe el mejor lenguaje de programaci\u00f3n para empezar, y el lenguaje que elijas pr\u00e1cticamente no tendr\u00e1 un efecto duradero en tu carrera. Los lenguajes de programaci\u00f3n pueden verse muy diferentes en la superficie, pero la mayor\u00eda de los conceptos fundamentales se transferir\u00e1n de un lenguaje a otro. Aprender un nuevo idioma tambi\u00e9n ser\u00e1 m\u00e1s f\u00e1cil con el tiempo; un principiante puede tardar meses antes de que se sienta c\u00f3modo con su primer lenguaje; un programador experimentado puede familiarizarse con un nuevo idioma en cuesti\u00f3n de d\u00edas.","title":"\u00bfCon qu\u00e9 lenguaje de programaci\u00f3n debo empezar?"},{"location":"ud1/elementos/#7-tips-para-aprender-a-programar-con-exito","text":"1 . Learn by doing. Always play with the code while learning 2 . Grasp the fundamentals for long-term benefits 3 . Code by hand. It sharpens proficiency and you\u2019ll need it to get a job 4 . Ask for help. You\u2019ll need it 5 . Seek out more online resources. There\u2019s a wealth of content 6 . Don\u2019t just read the sample code. Tinker with it! 7 . Take breaks when debugging Fuente: Coding dojo Tip S\u00e9 persistente, no te rindas!","title":"7 Tips para aprender a programar con \u00e9xito"},{"location":"ud1/elementos/#actividad-1-crear-y-compilar-un-programa-en-java-desde-linea-de-comandos","text":"Crea un PDF llamado \"UD1Actividad1.pdf\", incluyendo capturas con las siguientes acciones: Crea un fichero llamado HolaMundo.java con el siguiente texto: public class HolaMundo { public static void main ( String [ ] arg ) { System . out . println ( \"Mi primer programa.\" ); } } Compila el fichero desde la consola usando el compilador de java: javac HolaMundo.java Ejecuta el programa mediante java HolaMundo Responde a las siguientes cuestiones en el PDF. \u00bfSe ha generado alg\u00fan fichero extra al realizar el paso de compilaci\u00f3n?, Si es as\u00ed, \u00bfc\u00f3mo se llama el fichero compilado? \u00bfQu\u00e9 incluye dicho fichero? Si ahora quisiera ejecutar el programa HolaMundo desde otro sistema operativo que pasos tendr\u00eda que realizar? S\u00fabelo a AULES.","title":"Actividad 1 - Crear y compilar un programa en java desde l\u00ednea de comandos"},{"location":"ud1/elementos/#actividad-2-analisis-y-clasificacion-de-diferentes-ides","text":"Descarga e instala al menos 3 entornos de desarrollo diferentes a IntelliJ. Crea un nuevo proyecto Java Hola Mundo en cada uno de ellos. Crea una tabla donde realices una comparativa de ellos y clasif\u00edcalos seg\u00fan ciertas caracter\u00edsticas (plataforma, lenguajes que soporta, libres o propietarios, tipo de aplicaciones, uso en el mundo real, fabricantes o empresas, plugins o frameworks que ofrece, etc). Realiza capturas de pantalla y s\u00fabelo en formato PDF(\"UD1Actividad2.pdf\") a AULES.","title":"Actividad 2 - An\u00e1lisis y clasificaci\u00f3n de diferentes IDEs"},{"location":"ud1/holamundo/","text":"Proyecto \"Hola Mundo\". Estructura de un programa Cada vez que est\u00e1s aprendiendo un nuevo lenguaje de programaci\u00f3n es una tradici\u00f3n crear un nuevo programa muy simple que genera el texto Hola mundo . Veamos como podemos hacer esto en IntelliJ. Hacemos click en crear nuevo proyecto y elegimos el JDK 11 que hemos instalado. Luego en Next, Next, a\u00f1adimos nombre al proyecto y Finish. Creamos una nueva clase Java llamada Hello.java Vamos a crear un m\u00e9todo para imprimir el mensaje Hola mundo . Usaremos un m\u00e9todo especial llamado main . El main es el primer m\u00e9todo que Java busca y ejecuta en el proyecto. Es el punto de entrada. Ejecutamos el programa mediante A\u00f1adimos y ejecutamos la siguiente sentencia dentro del m\u00e9todo main: System.out.println(\"Hello World\"); Challenge Question Modifica el programa para que imprima por pantalla Hello Teacher . Question Realizar las actividades 1 y 2.","title":"Proyecto Hola Mundo"},{"location":"ud1/holamundo/#proyecto-hola-mundo-estructura-de-un-programa","text":"Cada vez que est\u00e1s aprendiendo un nuevo lenguaje de programaci\u00f3n es una tradici\u00f3n crear un nuevo programa muy simple que genera el texto Hola mundo . Veamos como podemos hacer esto en IntelliJ. Hacemos click en crear nuevo proyecto y elegimos el JDK 11 que hemos instalado. Luego en Next, Next, a\u00f1adimos nombre al proyecto y Finish. Creamos una nueva clase Java llamada Hello.java Vamos a crear un m\u00e9todo para imprimir el mensaje Hola mundo . Usaremos un m\u00e9todo especial llamado main . El main es el primer m\u00e9todo que Java busca y ejecuta en el proyecto. Es el punto de entrada. Ejecutamos el programa mediante A\u00f1adimos y ejecutamos la siguiente sentencia dentro del m\u00e9todo main: System.out.println(\"Hello World\");","title":"Proyecto \"Hola Mundo\". Estructura de un programa"},{"location":"ud1/holamundo/#challenge","text":"Question Modifica el programa para que imprima por pantalla Hello Teacher . Question Realizar las actividades 1 y 2.","title":"Challenge"},{"location":"ud1/setup/","text":"\u00bfQu\u00e9 se necesita para programar en Java? Instalar el JDK versi\u00f3n 11. Lo podemos descarga desde la p\u00e1gina oficial de Oracle. Instalar un IDE (Integrated Development Environment), es un programa que te ayudar a desarrollar aplicaciones. Hay muchas opciones disponibles de IDEs. Setup Java 11 y IntelliJ en Windows Vamos a la p\u00e1gina de Oracle y descargamos JDK 11. Instalamos el JDK. En linux usamos el siguiente comando para instalar el jdk: sudo apt-get install openjdk-11-jdk Windows: A\u00f1adimos en las variables de entorno del sistema dentro de la variable Path, la ruta donde se ha instalado java en nuestra m\u00e1quina (C:\\Program Files\\Java\\jdk-11\\bin) Windows: Agregamos tambi\u00e9n una nueva variable llamada JAVA_HOME --> C:\\Program Files\\Java\\jdk-11 (Ruta de nuestra m\u00e1quina). Verificamos que se ha instalado java, ejecutando desde l\u00ednea de comandos: java --version Descargamos e instalamos IntelliJ Community En File -> Settings, modificamos las siguientes opciones:","title":"Setup"},{"location":"ud1/setup/#que-se-necesita-para-programar-en-java","text":"Instalar el JDK versi\u00f3n 11. Lo podemos descarga desde la p\u00e1gina oficial de Oracle. Instalar un IDE (Integrated Development Environment), es un programa que te ayudar a desarrollar aplicaciones. Hay muchas opciones disponibles de IDEs.","title":"\u00bfQu\u00e9 se necesita para programar en Java?"},{"location":"ud1/setup/#setup-java-11-y-intellij-en-windows","text":"Vamos a la p\u00e1gina de Oracle y descargamos JDK 11. Instalamos el JDK. En linux usamos el siguiente comando para instalar el jdk: sudo apt-get install openjdk-11-jdk Windows: A\u00f1adimos en las variables de entorno del sistema dentro de la variable Path, la ruta donde se ha instalado java en nuestra m\u00e1quina (C:\\Program Files\\Java\\jdk-11\\bin) Windows: Agregamos tambi\u00e9n una nueva variable llamada JAVA_HOME --> C:\\Program Files\\Java\\jdk-11 (Ruta de nuestra m\u00e1quina). Verificamos que se ha instalado java, ejecutando desde l\u00ednea de comandos: java --version Descargamos e instalamos IntelliJ Community En File -> Settings, modificamos las siguientes opciones:","title":"Setup Java 11 y IntelliJ en Windows"},{"location":"ud1/statements/","text":"Statements - Sentencias Hemos comentado que un programa es un conjunto de instrucciones. Estas instrucciones se llaman sentencias o statements en ingl\u00e9s. Una sentencia es un segmento de c\u00f3digo que realiza una acci\u00f3n en el programa. A medida que se ejecuta un programa, decimos que ejecuta sentencias, lo que significa que lleva a cabo las acciones especificadas por esas sentencias. En nuestro programa Hello World, tenemos un statement en la l\u00ednea 4 y 6 . La regla en Java es que las sentencias deben terminar con un punto y coma. Si se olvida, se producir\u00eda un error de sintaxis. Sentencias de declaraci\u00f3n Se usan para definir una variable de un tipo de dato en particular. En Java, una variable debe declararse antes de que pueda usarse en un programa. De no hacerlo, se producir\u00eda un error de sintaxis. En su forma m\u00e1s simple una declaraci\u00f3n incluye el tipo de datos y el nombre de la variable. Opcionalmente se puede establecer la variable a cierto valor. Es decir, se dice que se ha inicializado. Ejemplos : int numero ; int a = 3 ; //se crea la variable a y se le asigna el valor 3 int dia ; Sentencias de asignaci\u00f3n Una sentencia de asignaci\u00f3n es una sentencia que almacena (asigna) un valor en una variable. Una sentencia de asignaci\u00f3n utiliza el signo igual (=) como operador de asignaci\u00f3n. En su forma m\u00e1s simple, tiene una variable en el lado izquierdo del signo igual y alg\u00fan tipo de valor en el lado derecho. Ejemplos : numero = 6 ; //asigno el valor 6 a la variable numero a = 0 ; dia = 22 ; En el siguiente ejemplo, hay variables tanto a la izquierda como a la derecha del operador de asignaci\u00f3n (=). Pero tienen un significado muy diferente. La variable de la derecha (num2) se trata como un valor. Si esa variable almacena 20, entonces ese es su valor. De hecho, cualquier cosa que ocurra en el lado derecho de un operador de asignaci\u00f3n se trata como un valor. La variable de la izquierda (num1) se trata como una ubicaci\u00f3n de memoria. Es donde se almacenar\u00e1 el valor 20 como resultado de la ejecuci\u00f3n de esta declaraci\u00f3n. El efecto de esta declaraci\u00f3n es copia el valor almacenado en num2 en num1, como se ilustra en la siguiente imagen. Ejemplo //se crean las variables int num1 = 10 ; int num2 = 20 ; num1 = num2 ; //se copia el valor de num2 a la variable num1 Challenge Question En el programa Hello World, imprime por pantalla la variable miPrimerEntero que hemos creado. Expressions Una expresi\u00f3n es un conjunto de variables, operadores e invocaciones de m\u00e9todos que se construyen para poder ser evaluadas retornando un resultado. Podemos cambiar la expresi\u00f3n y a\u00f1adir una suma, de forma que quede as\u00ed: int miPrimerEntero = 7 + 5 ; Java examina la expresi\u00f3n de la derecha del signo igual y ha realizado el c\u00e1lculo de una expresi\u00f3n matem\u00e1tica. Despu\u00e9s ha asignado ese valor a la variable miPrimerEntero. Podr\u00edamos complicar m\u00e1s la expresi\u00f3n utilizando operadores como par\u00e9ntesis, multiplicaciones, divisiones, etc. Los operadores en Java realizan una operaci\u00f3n en una variable o valor. M\u00e1s adelante veremos los diferentes operadores existentes. Challenge2 Question En el programa Hello World, crea las siguientes variables adicionales justo debajo de la declaraci\u00f3n \"int miPrimerEntero = 7;\" en el programa: num1 de tipo int y con un valor de 10. num2 de tipo int y con un valor de 8. y una tercera total que sea la suma de las anteriores. imprime por pantalla la variable total. Paquetes en Java - Java Packages Un paquete es una forma de organizar nuestros proyectos Java. Se pueden ver como carpetas dentro de la estructuraci\u00f3n interna del proyecto. IntelliJ nos ofrece la opci\u00f3n de automatizar esto cuando creamos un proyecto, simplemente seleccionando la opci\u00f3n:","title":"Statements y paquetes"},{"location":"ud1/statements/#statements-sentencias","text":"Hemos comentado que un programa es un conjunto de instrucciones. Estas instrucciones se llaman sentencias o statements en ingl\u00e9s. Una sentencia es un segmento de c\u00f3digo que realiza una acci\u00f3n en el programa. A medida que se ejecuta un programa, decimos que ejecuta sentencias, lo que significa que lleva a cabo las acciones especificadas por esas sentencias. En nuestro programa Hello World, tenemos un statement en la l\u00ednea 4 y 6 . La regla en Java es que las sentencias deben terminar con un punto y coma. Si se olvida, se producir\u00eda un error de sintaxis.","title":"Statements - Sentencias"},{"location":"ud1/statements/#sentencias-de-declaracion","text":"Se usan para definir una variable de un tipo de dato en particular. En Java, una variable debe declararse antes de que pueda usarse en un programa. De no hacerlo, se producir\u00eda un error de sintaxis. En su forma m\u00e1s simple una declaraci\u00f3n incluye el tipo de datos y el nombre de la variable. Opcionalmente se puede establecer la variable a cierto valor. Es decir, se dice que se ha inicializado. Ejemplos : int numero ; int a = 3 ; //se crea la variable a y se le asigna el valor 3 int dia ;","title":"Sentencias de declaraci\u00f3n"},{"location":"ud1/statements/#sentencias-de-asignacion","text":"Una sentencia de asignaci\u00f3n es una sentencia que almacena (asigna) un valor en una variable. Una sentencia de asignaci\u00f3n utiliza el signo igual (=) como operador de asignaci\u00f3n. En su forma m\u00e1s simple, tiene una variable en el lado izquierdo del signo igual y alg\u00fan tipo de valor en el lado derecho. Ejemplos : numero = 6 ; //asigno el valor 6 a la variable numero a = 0 ; dia = 22 ; En el siguiente ejemplo, hay variables tanto a la izquierda como a la derecha del operador de asignaci\u00f3n (=). Pero tienen un significado muy diferente. La variable de la derecha (num2) se trata como un valor. Si esa variable almacena 20, entonces ese es su valor. De hecho, cualquier cosa que ocurra en el lado derecho de un operador de asignaci\u00f3n se trata como un valor. La variable de la izquierda (num1) se trata como una ubicaci\u00f3n de memoria. Es donde se almacenar\u00e1 el valor 20 como resultado de la ejecuci\u00f3n de esta declaraci\u00f3n. El efecto de esta declaraci\u00f3n es copia el valor almacenado en num2 en num1, como se ilustra en la siguiente imagen. Ejemplo //se crean las variables int num1 = 10 ; int num2 = 20 ; num1 = num2 ; //se copia el valor de num2 a la variable num1","title":"Sentencias de asignaci\u00f3n"},{"location":"ud1/statements/#challenge","text":"Question En el programa Hello World, imprime por pantalla la variable miPrimerEntero que hemos creado.","title":"Challenge"},{"location":"ud1/statements/#expressions","text":"Una expresi\u00f3n es un conjunto de variables, operadores e invocaciones de m\u00e9todos que se construyen para poder ser evaluadas retornando un resultado. Podemos cambiar la expresi\u00f3n y a\u00f1adir una suma, de forma que quede as\u00ed: int miPrimerEntero = 7 + 5 ; Java examina la expresi\u00f3n de la derecha del signo igual y ha realizado el c\u00e1lculo de una expresi\u00f3n matem\u00e1tica. Despu\u00e9s ha asignado ese valor a la variable miPrimerEntero. Podr\u00edamos complicar m\u00e1s la expresi\u00f3n utilizando operadores como par\u00e9ntesis, multiplicaciones, divisiones, etc. Los operadores en Java realizan una operaci\u00f3n en una variable o valor. M\u00e1s adelante veremos los diferentes operadores existentes.","title":"Expressions"},{"location":"ud1/statements/#challenge2","text":"Question En el programa Hello World, crea las siguientes variables adicionales justo debajo de la declaraci\u00f3n \"int miPrimerEntero = 7;\" en el programa: num1 de tipo int y con un valor de 10. num2 de tipo int y con un valor de 8. y una tercera total que sea la suma de las anteriores. imprime por pantalla la variable total.","title":"Challenge2"},{"location":"ud1/statements/#paquetes-en-java-java-packages","text":"Un paquete es una forma de organizar nuestros proyectos Java. Se pueden ver como carpetas dentro de la estructuraci\u00f3n interna del proyecto. IntelliJ nos ofrece la opci\u00f3n de automatizar esto cuando creamos un proyecto, simplemente seleccionando la opci\u00f3n:","title":"Paquetes en Java - Java Packages"},{"location":"ud1/variables/","text":"Variables Las variables en Java es una forma de almacenar informaci\u00f3n en nuestro ordenador. Definimos variables asign\u00e1ndoles un nombre. De igual manera se puede acceder a la informaci\u00f3n que guardar las variable, simplemente accediendo por el nombre que le hemos dado. Es el ordenador el que se encarga de averiguar d\u00f3nde se almacena internamente en la memoria RAM del ordenador. Como su nombre indica \"variable\", se puede modificar el contenido que \u00e9sta almacena, es decir, es variable. Lo \u00fanico que tenemos que hacer es decirle al PC qu\u00e9 tipo de informaci\u00f3n queremos guardar en nuestra variable y darle un nombre. Existe diferentes tipos de informaci\u00f3n que podemos utilizar para definir nuestras variables. Se les conoce como tipos de datos o data types. Los tipos de datos son palabras reservas keywords en Java, es decir, no podemos utilizarlas fuera del contexto de tipo de datos. Para definir una variable, necesitamos especificar el tipo de datos, luego darle un nombre a nuestra variable, y opcionalmente, podemos agregar una expresi\u00f3n para inicializar la variable con un valor. Reglas para el nombrado de variables Tiene que comenzar con una letra o '_', nunca con n\u00fameros. Puede contener n\u00fameros. No debe contener espacios en blanco. No debe ser muy largo y debe expresar algo en el contexto. No se pueden usar palabras reservadas. May\u00fasculas y min\u00fasculas se tratan diferente. Definimos nuestra primera variable en el programa de la siguiente forma: La l\u00ednea que acabamos de escribir se conoce como sentencia de declaraci\u00f3n . Keywords Son palabras reservadas del lenguaje. Es decir, son palabras que tienen un significado especial en Java y no puedes usarlas fuera de ese contexto. Ejemplos: public, class, void, static, etc. Existen 61 keywords en Java. Acceso Visibilidad Vida de las variables","title":"Variables"},{"location":"ud1/variables/#variables","text":"Las variables en Java es una forma de almacenar informaci\u00f3n en nuestro ordenador. Definimos variables asign\u00e1ndoles un nombre. De igual manera se puede acceder a la informaci\u00f3n que guardar las variable, simplemente accediendo por el nombre que le hemos dado. Es el ordenador el que se encarga de averiguar d\u00f3nde se almacena internamente en la memoria RAM del ordenador. Como su nombre indica \"variable\", se puede modificar el contenido que \u00e9sta almacena, es decir, es variable. Lo \u00fanico que tenemos que hacer es decirle al PC qu\u00e9 tipo de informaci\u00f3n queremos guardar en nuestra variable y darle un nombre. Existe diferentes tipos de informaci\u00f3n que podemos utilizar para definir nuestras variables. Se les conoce como tipos de datos o data types. Los tipos de datos son palabras reservas keywords en Java, es decir, no podemos utilizarlas fuera del contexto de tipo de datos. Para definir una variable, necesitamos especificar el tipo de datos, luego darle un nombre a nuestra variable, y opcionalmente, podemos agregar una expresi\u00f3n para inicializar la variable con un valor.","title":"Variables"},{"location":"ud1/variables/#reglas-para-el-nombrado-de-variables","text":"Tiene que comenzar con una letra o '_', nunca con n\u00fameros. Puede contener n\u00fameros. No debe contener espacios en blanco. No debe ser muy largo y debe expresar algo en el contexto. No se pueden usar palabras reservadas. May\u00fasculas y min\u00fasculas se tratan diferente. Definimos nuestra primera variable en el programa de la siguiente forma: La l\u00ednea que acabamos de escribir se conoce como sentencia de declaraci\u00f3n .","title":"Reglas para el nombrado de variables"},{"location":"ud1/variables/#keywords","text":"Son palabras reservadas del lenguaje. Es decir, son palabras que tienen un significado especial en Java y no puedes usarlas fuera de ese contexto. Ejemplos: public, class, void, static, etc. Existen 61 keywords en Java.","title":"Keywords"},{"location":"ud1/variables/#acceso","text":"","title":"Acceso"},{"location":"ud1/variables/#visibilidad","text":"","title":"Visibilidad"},{"location":"ud1/variables/#vida-de-las-variables","text":"","title":"Vida de las variables"}]}